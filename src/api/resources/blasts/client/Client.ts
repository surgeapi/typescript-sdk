/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Surge from "../../../index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace Blasts {
    export interface Options {
        environment?: core.Supplier<environments.SurgeEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Blasts {
    constructor(protected readonly _options: Blasts.Options) {}

    /**
     * Sends a Blast.
     *
     * @param {string} accountId - The account for which the blast should be sent.
     * @param {Surge.BlastRequest} request
     * @param {Blasts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.blasts.send("acct_01j9a43avnfqzbjfch6pygv1td", {
     *         attachments: [{
     *                 url: "https://example.com/image.jpg"
     *             }],
     *         body: "Join us for our grand opening!",
     *         contacts: ["ctc_01j9dy8mdzfn3r0e8x1tbdrdrf"],
     *         name: "Grand Opening Announcement",
     *         segments: ["seg_01j9dy8mdzfn3r0e8x1tbdrdrf"],
     *         send_at: "2024-02-01T15:00:00Z"
     *     })
     */
    public async send(
        accountId: string,
        request: Surge.BlastRequest = {},
        requestOptions?: Blasts.RequestOptions,
    ): Promise<Surge.BlastResponse> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SurgeEnvironment.Default,
                `accounts/${encodeURIComponent(accountId)}/blasts`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@surgeapi/node",
                "X-Fern-SDK-Version": "0.25.5",
                "User-Agent": "@surgeapi/node/0.25.5",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as Surge.BlastResponse;
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SurgeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SurgeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.SurgeTimeoutError("Timeout exceeded when calling POST /accounts/{account_id}/blasts.");
            case "unknown":
                throw new errors.SurgeError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
