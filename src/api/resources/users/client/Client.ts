/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Surge from "../../../index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace Users {
    export interface Options {
        environment?: core.Supplier<environments.SurgeEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Users {
    constructor(protected readonly _options: Users.Options) {}

    /**
     * Creates a new User object.
     *
     * @param {string} accountId - The account for which the user should be created.
     * @param {Surge.UserRequest} request
     * @param {Users.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.users.create("acct_01j9a43avnfqzbjfch6pygv1td", {
     *         first_name: "Brian",
     *         last_name: "O'Conner",
     *         metadata: {
     *             "email": "boconner@toretti.family",
     *             "user_id": 1234
     *         },
     *         photo_url: "https://toretti.family/people/brian.jpg"
     *     })
     */
    public create(
        accountId: string,
        request: Surge.UserRequest,
        requestOptions?: Users.RequestOptions,
    ): core.HttpResponsePromise<Surge.UserResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(accountId, request, requestOptions));
    }

    private async __create(
        accountId: string,
        request: Surge.UserRequest,
        requestOptions?: Users.RequestOptions,
    ): Promise<core.WithRawResponse<Surge.UserResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SurgeEnvironment.Default,
                `accounts/${encodeURIComponent(accountId)}/users`,
            ),
            method: "POST",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@surgeapi/node",
                "X-Fern-SDK-Version": "0.25.6",
                "User-Agent": "@surgeapi/node/0.25.6",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Surge.UserResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SurgeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SurgeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SurgeTimeoutError("Timeout exceeded when calling POST /accounts/{account_id}/users.");
            case "unknown":
                throw new errors.SurgeError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieves a User object.
     *
     * @param {string} id -
     * @param {Users.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.users.getUser("usr_01j9dwavghe1ttppewekjjkfrx")
     */
    public getUser(id: string, requestOptions?: Users.RequestOptions): core.HttpResponsePromise<Surge.UserResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getUser(id, requestOptions));
    }

    private async __getUser(
        id: string,
        requestOptions?: Users.RequestOptions,
    ): Promise<core.WithRawResponse<Surge.UserResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SurgeEnvironment.Default,
                `users/${encodeURIComponent(id)}`,
            ),
            method: "GET",
            headers: {
                Authorization: await this._getAuthorizationHeader(),
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@surgeapi/node",
                "X-Fern-SDK-Version": "0.25.6",
                "User-Agent": "@surgeapi/node/0.25.6",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Surge.UserResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SurgeError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SurgeError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SurgeTimeoutError("Timeout exceeded when calling GET /users/{id}.");
            case "unknown":
                throw new errors.SurgeError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
